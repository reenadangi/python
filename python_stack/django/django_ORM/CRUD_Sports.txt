>all baseball leagues
	context = {
		# "leagues": League.objects.all(),
		# (title__startswith="Little")
		"leagues": League.objects.filter(sport="Basketball"),
		"teams": Team.objects.all(),
		"players": Player.objects.all(),
	}
>all womens' leagues
 
"leagues": League.objects.filter(name__contains="Women")

>all leagues where sport is any type of hockey
	"leagues": League.objects.filter(sport__contains="Hockey"),
>.all leagues where sport is something OTHER THAN football

"leagues": League.objects.exclude(sport="Football"),

...all leagues that call themselves "conferences"
"leagues": League.objects.filter(name__contains="Conference"),

...all leagues in the Atlantic region

...all teams based in Dallas
"teams": Team.objects.filter(location__contains="Dallas")

...all teams named the Raptors
"teams": Team.objects.filter(team_name__contains="Raptors"),

...all teams whose location includes "City"
"teams": Team.objects.filter(location__contains="City"),

...all teams whose names begin with "T"
"teams": Team.objects.filter(team_name__startswith="T"),

...all teams, ordered alphabetically by location
	"teams": Team.objects.all().order_by("location"),


...all teams, ordered by team name in reverse alphabetical order
"teams": Team.objects.all().order_by("-team_name"),

...every player with last name "Cooper"
"players": Player.objects.filter(last_name="Cooper"),


...every player with first name "Joshua"
"players": Player.objects.filter(first_name="Joshua"),


...every player with last name "Cooper" EXCEPT those with "Joshua" as the first name
"players":Player.objects.exclude(first_name="Joshua").filter(last_name="Cooper"),


...all players with first name "Alexander" OR first name "Wyatt"
"players":Player.objects.filter(first_name="Alexander" , first_name="Wyatt")

